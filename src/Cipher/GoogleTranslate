package Cipher;
import com.google.api.services.translate.Translate;
import com.google.api.services.translate.model.TranslationsListResponse;
import com.google.api.services.translate.model.TranslationsResource;

import java.util.*;
import java.io.*;

/**
 *
 * @author Stephanie
 */
public class GoogleTranslate {
    
final String key = new String("AIzaSyCpmO6K7eRBBqqPA9emEYU4RzcTW5oDy-A");
final String name = new String("translateproject");

public String detectLanguage(String decodeText) {   
    StringBuilder resultPool;    
    String result;
    result = new String("");
    resultPool = new StringBuilder("");
    try {           
            Translate t = new Translate.Builder(
                    com.google.api.client.googleapis.javanet.GoogleNetHttpTransport.newTrustedTransport()
                    , com.google.api.client.json.gson.GsonFactory.getDefaultInstance(), null)                                   
                    .setApplicationName(this.name)                    
                    .build();           
            Translate.Translations.List list = t.new Translations().list(
                    Arrays.asList(decodeText), 
                        //Target language   
                        "EN");  
            list.setKey(this.key);
            TranslationsListResponse response = list.execute();
            for(TranslationsResource tr : response.getTranslations()) {
                String lng = tr.getDetectedSourceLanguage();
                resultPool.append(lng);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    result = resultPool.toString();
    return result;
}
    
    public String translateLanguage(String decodeText,String detectLang) {   
    StringBuilder resultPool;     
    String result, language;
    result = new String("");
    resultPool = new StringBuilder("");
    
    try {           
            Translate t = new Translate.Builder(
                    com.google.api.client.googleapis.javanet.GoogleNetHttpTransport.newTrustedTransport()
                    , com.google.api.client.json.gson.GsonFactory.getDefaultInstance(), null)                                   
                    .setApplicationName(this.name)                    
                    .build();           
            Translate.Translations.List list = t.new Translations().list(
                    Arrays.asList(decodeText), 
                        //Target language   
                        "EN");  
            list.setKey(this.key);
            list.setSource(detectLang);
            TranslationsListResponse response = list.execute();
            for(TranslationsResource tr : response.getTranslations()) {
                resultPool.append(tr.getTranslatedText());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    result = resultPool.toString();
    return result;
    }

    public String checkEnglish(String word) {
    // load the dictionary into a set for fast lookups
    Set<String> dictionary = new HashSet<String>();
        String keyResult = new String("");
    try
    {
    Scanner filescan = new Scanner(new File("dictionaries/englishDict.txt"));

    
    while (filescan.hasNext()) {
        dictionary.add(filescan.nextLine().toLowerCase());
    }
    // start the search, pass empty stack to represent words found so far
    keyResult = search(word, dictionary);
    }
    catch (FileNotFoundException ex) {
    }
    return keyResult;
}

public String search(String input, Set<String> dictionary) {
String result = new String("");
String check = input;
    if (dictionary.contains(check)) {
            result = "WORD FOUND";
            } else {
                // there's more input left, search the remaining part
                result = "NO WORD FOUND";
            }

           return result;
        }
    }
